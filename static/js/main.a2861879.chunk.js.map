{"version":3,"sources":["NumberBaseInput.js","InfoBlurb.js","ConversionVisualizer.js","App.js","index.js"],"names":["validateParseIntInput","str","base","toLowerCase","arr","Array","from","sort","a","b","every","input","isFinite","parseInt","NumberBaseInput","props","handleValueChange","bind","handleBaseChange","e","value","this","target","onValueChange","validateBases","onBaseChange","readOnly","toString","validBases","className","type","defaultValue","onChange","React","Component","InfoBlurb","message","ALPHABET","ConversionVisualizer","baseFrom","startingValue","startingValueDigits","String","digitTimesDecimalElements","map","item","index","plusDiv","basePower","length","baseTo","equationElements","quotient","Math","trunc","remainder","digitIndicator","push","noDecimalBlurb","binaryShortcutBlurb","binaryShortcutSet","Set","visualizeInfoBinaryShortcut","has","visualizeToDecimal","visualizeFromDecimal","id","renderToDecimal","renderFromDecimal","App","state","onBaseFromChange","onBaseToChange","setState","bool","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2861879.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './index.css';\n\nfunction validateParseIntInput(str, base) {\n  if (str === '') {\n    return false\n  }\n  str = str.toLowerCase();\n  let arr = Array.from(str);\n  arr.sort((a, b) => a > b ? a : b)\n  return arr.every(input => isFinite(parseInt(input, base)))\n}\n\nclass NumberBaseInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleBaseChange = this.handleBaseChange.bind(this);\n  }\n\n  handleValueChange(e, base=this.props.base) {  // validates value here b/c needs e.target.value\n    let value;\n    if (validateParseIntInput(e.target.value, base)) {\n      value = parseInt(e.target.value, base);\n    } else {\n      value = 'Invalid';\n    }\n    this.props.onValueChange(value);\n  }\n\n  handleBaseChange(e) {\n    let base = e.target.value;\n    // TODO: Make changing bases better\n    if (e.target.value < 2 || e.target.value > 36) {\n      base = 36;\n      this.props.validateBases(false);\n    } else {\n      this.props.validateBases(true);\n    }\n    this.props.onBaseChange(+base);\n\n    if (!this.props.readOnly) { // Update internal value so the input value can stay the same\n      this.props.onValueChange(\n        parseInt(this.props.value.toString(this.props.base), base)\n        )\n    }\n  }\n\n  render() {\n    const base = this.props.base;\n\n    let value;\n    if (this.props.validBases) {\n      value = this.props.value.toString(base);\n    } else {\n      value = 'Invalid'\n    }\n\n    let readOnly = '';\n    if (this.props.readOnly) {\n      readOnly = 'readOnly';\n    }\n\n    return (\n      <div className=\"number-base\">\n        <div className=\"number\">\n          <label>(number)</label>\n          <input type=\"text\" \n            readOnly={readOnly} \n            defaultValue={value}  // So program leaves user input alone\n            value = {this.props.readOnly ? value : null}\n            onChange={this.handleValueChange}/>\n        </div>\n        <div className=\"base\">\n          <input type=\"text\"\n            defaultValue={base}\n            onChange={this.handleBaseChange}/>\n          <label>(base)</label>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default NumberBaseInput;","import React from 'react';\nimport './App.css';\nimport './index.css';\n\nclass InfoBlurb extends React.Component {\n  render() {\n    return (\n      <div className=\"rounded-border info\">\n        <i className=\"fa fa-info-circle\"></i>\n        <p>\n          {this.props.message}\n        </p>\n      </div>\n    )\n  }  \n}\n\nexport default InfoBlurb;","import React from 'react';\nimport InfoBlurb from './InfoBlurb.js';\nimport './App.css';\nimport './index.css';\n\nconst ALPHABET = [...'abcdefghijklmnopqrstuvwxyz']  // Useful for larger bases\n\nclass ConversionVisualizer extends React.Component {\n  renderToDecimal(value, baseFrom) {  // This could be another component?\n    const startingValue = value.toString(baseFrom);\n    const startingValueDigits = Array.from(String(startingValue));\n\n    const digitTimesDecimalElements = startingValueDigits.map((item, index) => {\n        let basePower = startingValueDigits.length - 1 - index;\n        let plusDiv;\n        if (basePower !== 0) {\n          plusDiv = <div className=\"centered plus\"> + </div>\n        }\n        return (  // This could be another component?\n          <div>\n            <span className=\"centered equation\">\n              <span className=\"expression\">\n                {item} * {baseFrom}<sup>{basePower}</sup>\n              </span> \n              <span className=\"answer\">\n                = {item * baseFrom**basePower}\n              </span>\n            </span>\n            {plusDiv}\n          </div>\n        )\n      }\n    )\n\n    return (\n      <div>\n        <p className=\"starting-value\">\n          {startingValue}<sub>{baseFrom}</sub> =\n        </p>\n        {digitTimesDecimalElements}\n        <p className=\"ending-value\">\n          = {value}<sub>10</sub>\n        </p>\n      </div>\n    )\n  }\n\n  renderFromDecimal(value, baseTo) {\n    let startingValue = value;\n    let equationElements = [];\n\n    while (value) {\n      const quotient = Math.trunc(value / baseTo);\n      let remainder = value % baseTo;\n      let digitIndicator;\n\n      if (remainder > 9) {\n        let remainder_symbol = ALPHABET[remainder - 10];\n        remainder = remainder_symbol + ` (${remainder})`\n      }\n\n      if (startingValue === value) {\n        digitIndicator = (\n          <span> \n            <small>\n              <i className=\"fa fa-long-arrow-left\"></i> Rightmost digit \n            </small>\n          </span>\n        )\n      } else if (quotient === 0) {\n        digitIndicator = (\n          <span> \n            <small>\n              <i className=\"fa fa-long-arrow-left\"></i> Leftmost digit \n            </small>\n          </span>\n        )\n      }\n\n\n      equationElements.push(\n        <div>\n          <span className=\"centered equation\">\n            <span className=\"expression\">\n              {value} / {baseTo} = {quotient} \n            </span>\n            <span className=\"remainder\">\n              Remainder: {remainder} {digitIndicator}\n            </span>\n          </span>\n        </div>\n      )\n\n      value = quotient;\n    }\n\n    return (\n      <div>\n        <p className=\"starting-value\">\n          {startingValue}<sub>10</sub> =\n        </p>\n        {equationElements}\n        <p className=\"ending-value\">\n          = {startingValue.toString(baseTo)}<sub>{baseTo}</sub>\n        </p>\n      </div>\n    )\n  }\n\n  render() {\n    const value = this.props.value;\n    const baseFrom = this.props.baseFrom;\n    const baseTo = this.props.baseTo;\n\n\n    // These booleans decide to selectively visualize only what's needed\n    // Info blurbs:\n\n    const binaryShortcutSet = new Set([2, 8, 16]);\n    let visualizeInfoBinaryShortcut = (\n      (binaryShortcutSet.has(baseTo) && binaryShortcutSet.has(baseFrom))\n      || (binaryShortcutSet.has(baseFrom) && binaryShortcutSet.has(baseTo))\n    );\n\n    let visualizeInfoNoDecimalBases = (baseTo !== 10 && baseFrom !== 10 \n      && !visualizeInfoBinaryShortcut\n    );\n\n    // Actual visualizers:\n    let visualizeToDecimal = (value !== 'Invalid' \n      && baseFrom !== baseTo \n      && baseFrom !== 10);\n    let visualizeFromDecimal = (value !== 'Invalid' \n      && baseFrom !== baseTo\n      && baseTo !== 10);\n\n    let noDecimalBlurb;\n    let binaryShortcutBlurb;\n\n    if (visualizeInfoNoDecimalBases) {\n      noDecimalBlurb = <InfoBlurb \n        message=\"Note: Converting to decimal is not necessary to change between \n        bases that are not decimal. However, our decimal-oriented education and\n        intuition makes it generally easier to convert to decimal. To avoid\n        converting to decimal, do all the math in terms of the numerical base \n        you want to end up in!\"/>\n    }\n\n    if (visualizeInfoBinaryShortcut) {\n      binaryShortcutBlurb = <InfoBlurb\n        message=\"Note: Binary (base 2) --> Octal (base 8) or Hexadecimal (base \n        16) or vice versa has a shortcut by grouping the numbers in a particular \n        way. It is not used in this visualization currently.\"/>\n    }\n\n    return (\n      <div className=\"centered\" id=\"visualizer\">\n        <h2>Conversion visualized:</h2>\n        <div id=\"visualizer-content\">\n          {noDecimalBlurb}\n          {binaryShortcutBlurb}\n          {visualizeToDecimal && this.renderToDecimal(value, baseFrom)}\n          <br />\n          {visualizeFromDecimal && this.renderFromDecimal(value, baseTo)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ConversionVisualizer;","import React from 'react';\nimport NumberBaseInput from './NumberBaseInput.js';\nimport ConversionVisualizer from './ConversionVisualizer.js';\nimport './App.css';\nimport './index.css';\n\n\nconst DEFAULT_VALUE = 22;\nconst DEFAULT_BASE_FROM = 2;\nconst DEFAULT_BASE_TO = 12;\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: DEFAULT_VALUE,  // value always stored as decimal\n      baseFrom: DEFAULT_BASE_FROM,\n      baseTo: DEFAULT_BASE_TO,\n      validBases: true  // Hacky way of making bases work\n    };\n\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onBaseFromChange = this.onBaseFromChange.bind(this);\n    this.onBaseToChange = this.onBaseToChange.bind(this);\n    this.validateBases = this.validateBases.bind(this);\n  }\n\n  onValueChange(value) {\n    this.setState({value});\n  }\n\n  onBaseFromChange(baseFrom) {\n    this.setState({baseFrom});\n  }\n\n  onBaseToChange(baseTo) {\n    this.setState({baseTo});\n  }\n\n  validateBases(bool) {\n    this.setState({validBases: bool})\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"centered\" id=\"base-converter\">\n          <NumberBaseInput \n            value={this.state.value}\n            base={this.state.baseFrom}\n            validBases={this.state.validBases}\n            onValueChange={this.onValueChange}\n            onBaseChange={this.onBaseFromChange}\n            validateBases={this.validateBases}/> \n          <i className=\"arrow fa fa-long-arrow-right\"></i> \n          <NumberBaseInput \n            value={this.state.value}\n            base={this.state.baseTo}\n            validBases={this.state.validBases}\n            onBaseChange={this.onBaseToChange}\n            validateBases={this.validateBases}\n            readOnly={true}/>\n        </div>\n        <hr />\n        <ConversionVisualizer \n          value={this.state.value}\n          baseFrom={this.state.baseFrom}\n          baseTo={this.state.baseTo}/>\n      </div>\n    )\n  }\n}\n\n\n\n\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}